% Стратегическое и тактическое планирование модельного эксперимента
clear all;
nf = 2; % количество факторов в плане эксперимента
minf = [-2 3]; % минимальное значение факторов a и k
maxf = [4 4]; % максимальное значение факторов a и k

% Стратегическое планирование эксперимента
% Формирование дробного двухуровневого плана эксперимента для учета взаимодействий

fracfact('a b ab'); % формируем список возможных взаимодействий
% вычисление общего количества точек в плане эксперимента 
% (все возможные сочетания уровней факторов)
N = 2 ^ nf;
fracplan = ans;

% Сформируем матрицу X с добавлением столбца значений фиктивного фактора
% "Dummy variable" 
fictfact = ones(N, 1); % ones - возвращает скалярную 1, либо матрицу этих единиц
X = [fictfact ans]'; % формируем транспонированную матрицу плана с добавлением фиктивного фактора

fraceks = zeros(N, nf); % матрица (кол-во экспериментов x кол-во факторов)
for i = 1:nf
    for j = 1:N
        % Заполняем матрицу значениями
        fraceks(j,i) = minf(i) + (fracplan(j,i) + 1) * (maxf(i) - minf(i)) / 2;
    end
end

% Тактическое планирование эксперимента

d_mu = 0.08; % доверительный интервал
alpha = 0.01; % уровень значимости
tkr_alpha = norminv(1 - alpha / 2); % t-критическое

% результаты эксперимента
Y = zeros(1, N);
for j = 1:N
    % параметры для логистического распределения
    a = fraceks(j, 1);
    k = fraceks(j, 2);
    
    % Имитация функционирования системы
    u = zeros(1, 1);

    i = 0;
    while 1
        i = i + 1;
        u(i) = systemeqv(a, k);
        if i == 1
            u = [u; 0];
            continue;
        end
        
        % разброс реакции относительно среднего значения
        % несмещённая оценка
        D = (1 / (length(u) - 1)) * sum((u - mean(u)).^2); 
        u = [u; 0];
        % Определение требуемого числа испытаний для задачи оценки среднего
        % предположение о нормальности распределения ошибок
        NE = ceil((tkr_alpha ^ 2) * D / d_mu ^ 2);
        % предположение о нормальности распределения ошибок может быть неверно
        % NE = ceil(D / (alpha * d_mu ^ 2)); 
        % disp(NE);
        if i >= NE
            u(end) = [];
            break;
        end
    end
    % Вычисляем и записываем экспериментальное матожидание по выборке наблюдений
    mx = mean(u);
    Y(j) = mx;
end

% Регрессионный анализ

% Определение коэффициентов регрессии
C = X * X';
b_ = inv(C) * X * Y';

% Формирование зависимости реакции системы на множестве реальных значений факторов
A = minf(1):0.01:maxf(1);
B = minf(2):0.01:maxf(2);
[unused, N1] = size(A);
[unused, N2] = size(B);

Yc = zeros(N2, N1);
Yo = zeros(N2, N1);
for i = 1:N1
    for j = 1:N2
        an = 2 * (A(i) - minf(1)) / (maxf(1) - minf(1)) - 1;
        bn = 2 * (B(j) - minf(2)) / (maxf(2) - minf(2)) - 1;
        % Экспериментальная поверхность реакции (линейная регрессия)
        Yc(j, i) = b_(1) + an * b_(2) + bn * b_(3) + an * bn * b_(4);
        % Теоретическая поверхность реакции
        Yo(j, i) = A(i);
    end
end

% Отображение зависимостей в трехмерной графике
[x, y] = meshgrid(A, B); % координата в двумерном пространстве
figure;
% Экспериментальная поверхность реакции
subplot(1, 2, 1), plot3(x, y, Yc);
xlabel('fact a');
ylabel('fact b');
zlabel('Yc');
title('System output');
grid on;
% Теоритическая поверхность реакции
subplot(1, 2, 2), plot3(x, y, Yo);
xlabel('fact a');
ylabel('fact b');
zlabel('Yo');
title('System output');
grid on;